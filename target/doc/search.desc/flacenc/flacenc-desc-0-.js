searchState.loadedDescShard("flacenc", 0, "flacenc-rs\nAbstract interface for bit-based output.\nComponents to be written in the output file.\nEncoder configuration structs.\nConfiguration constants\nEncodes <code>FrameBuf</code> to <code>Frame</code>.\nEncodes <code>Source</code> to <code>Stream</code>.\nError and verification traits\nModule for input source handling.\nStorage-agnostic interface trait for bit-based output.\nTrait for the bit-addressible unsigned integers.\n<code>BitSink</code> implementation based on <code>Vec</code> of <code>u8</code>s.\nError type that may happen while writing bits to <code>BitSink</code>.\n<code>BitSink</code> implementation based on <code>Vec</code> of unsigned ints (u8/ …\nTrait for the signed integers that can be provided to …\nPuts zeros to <code>BitSink</code> until the length aligns to the byte …\nReturns a reference to the internal bytes.\nClears the vector, removing all values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes <code>ByteSink</code> and returns the internal buffer.\nChecks if the buffer is empty.\nReturns the number of bits stored in the buffer.\nCreates new <code>MemSink</code> instance with the default capacity.\nReseerves capacity for at least <code>additional_in_bits</code> more …\nReturns bits in a string.\nCreates new <code>MemSink</code> instance with the specified capacity …\nWrites all bits in <code>val: Bits</code>.\nWrites bytes after alignment, and returns padded bits.\nWrites <code>n</code> LSBs to the sink.\nWrites <code>n</code> MSBs to the sink.\nWrites the contents to a mutable byte slice.\nWrites <code>val</code> in two’s coplement format.\nWrites <code>n</code>-bits of zeros.\n12 bits-per-second\n16 bits-per-second\n20 bits-per-second\n24 bits-per-second\n32 bits-per-second\n8 bits-per-second\nFLAC components that can be represented in a bit sequence.\nEnum for channel assignment in <code>FRAME_HEADER</code>.\n<code>SUBFRAME_CONSTANT</code> component.\nThis variant contains <code>Constant</code> sub-frame.\n<code>SUBFRAME_FIXED</code> component.\nThis variant contains <code>FixedLpc</code> sub-frame.\n<code>FRAME</code> component.\n<code>FRAME_HEADER</code> component.\nIndicates that the frame contains multiple channels …\nIndicates that the frame contains left and side channels.\n<code>SUBFRAME_LPC</code> component.\nThis variant contains <code>Lpc</code> sub-frame.\n<code>METADATA_BLOCK</code> component.\nEnum that covers variants of <code>METADATA_BLOCK</code>.\nIndicates that the frame contains mid and side channels.\nQuantized LPC coefficients.\n<code>tag == 3</code> is reserved.\n<code>RESIDUAL</code> component.\nIndicates that the frame contains right and side channels.\nEnum for supported sample sizes.\n<code>STREAM</code> component.\n<code>METADATA_BLOCK_STREAM_INFO</code> component.\nVariant that contains <code>StreamInfo</code>.\n<code>SUBFRAME</code> component.\nVariant that contains unknown data.\n<code>Unspecified</code> can be used in <code>FrameHeader</code> to instruct …\n<code>SUBFRAME_VERBATIM</code> component.\nThis variant contains <code>Verbatim</code> sub-frame.\nAppends <code>Frame</code> to this <code>Stream</code> and updates <code>StreamInfo</code>.\nAdd <code>MetadataBlockData</code> to this <code>Stream</code>.\nObtain inner <code>StreamInfo</code> if <code>self</code> contains <code>StreamInfo</code>.\nReturns <code>bits_per_sample</code> field.\nReturns bits-per-sample.\nReturns bits-per-sample.\nReturns bits-per-sample.\nReturns bits-per-sample.\nReturns bits-per-sample.\nReturns the number of extra bit required to store the …\nReturns block size of this frame.\nReturns block size.\nReturns block size.\nReturns <code>ChannelAssignment</code> of this frame.\nReturns <code>channels</code> field.\nReturns an individual coefficient in quantized form.\nCounts the number of bits required to store the component.\nReturns offset value.\nReturns <code>Frame</code> for the given frame number.\nReturns the number of <code>Frame</code>s in the stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs <code>SampleSizeSpec</code> from the bits-per-sample value.\nConstructs <code>ChannelAssignment</code> from the tag.\nConstructs <code>SampleSizeSpec</code> from the tag (an integer in the …\nReturns a reference to <code>FrameHeader</code> of this frame.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the bits-per-sample value corresponding to <code>self</code>.\nDeconstructs frame and transfers ownership of the data …\nConsumes <code>self</code> and returns the parts if <code>self</code> is a stereo …\nReturns the tag (an integer in the bitstream) …\nReturns <code>max_block_size</code> field.\nReturns <code>max_frame_size</code> field.\nReturns <code>md5_digest</code> field.\nReturns <code>min_block_size</code> field.\nReturns <code>min_frame_size</code> field.\nConstructs <code>Stream</code> with the given meta information.\nConstructs new <code>StreamInfo</code>.\nConstructs <code>Frame</code> from header and subframes.\nConstructs new <code>Constant</code>.\nConstructs new <code>Verbatim</code>.\nConstructs new <code>FixedLpc</code>.\nConstructs new <code>Lpc</code>.\nConstructs new <code>QuantizedParameters</code>.\nConstructs <code>Residual</code> from loaded encodes.\nConstructs <code>FrameHeader</code> in fixed-length mode.\nConstructs new <code>MetadataBlockData::Unknown</code> from the content …\nConstructs <code>FrameHeader</code> in variable-length mode.\nReturns the order of LPC (of fixed LPC).\nReturns the order of LPC (of fixed LPC).\nReturns the order of LPC specified by this parameter.\nReturns a reference to parameter struct.\nReturns the partition order for the PRC.\nReturns precision.\nAllocates precomputed bitstream buffer, and precomputes.\nReturns a reference to the internal <code>Residual</code> component.\nReturns a reference to the internal <code>Residual</code> component.\nReturns the residual value for the <code>t</code>-th sample.\nReturns the rice parameter for the <code>p</code>-th partition\nReturns <code>sample_rate</code> field.\nReturns a slice for the verbatim samples.\nResets <code>min_block_size</code> and <code>max_block_size</code> fields.\nClear <code>variable_block_size</code> flag, and set <code>frame_number</code>.\nResets <code>min_frame_size</code> and <code>max_frame_size</code> fields.\nResets MD5 digest value by the given slice.\nSets <code>total_samples</code> field.\nReturns the shift parameter.\nReturns a reference to <code>StreamInfo</code> associated with <code>self</code>.\nReturns <code>SubFrame</code> for the given channel.\nReturns the number of <code>SubFrame</code>s in this <code>Frame</code>.\nReturns <code>total_samples</code> field.\nUpdates <code>StreamInfo</code> with values from the given Frame.\nReturns warm-up samples as a slice.\nReturns warm-up samples as a slice.\nConstructs <code>Stream</code> with the given <code>StreamInfo</code>.\nWrites the bit sequence to <code>BitSink</code>.\nWrites <code>Residual</code> to the <code>BitSink</code>.\nMetadata content represented in <code>Vec&lt;u8&gt;</code>.\n7-bit metadata type tag.\nEstimates the number of bits using partitioned entropy …\nPerforms actual encoding and count bits.\nConfiguration for encoder.\nConfiguration for fixed-parameter linear-predictive coding.\nConfiguration for (LPC) order selection algorithms.\nConfiguration for partitioned-rice coding (PRC).\nConfiguration for quantized linear-predictive coding …\nRectangular window.\nConfiguration for stereo coding algorithms.\nConfiguration for sub-frame (individual channel) coding.\nTukey window.\nAnalysis window descriptor.\nEncoder block size (default: <code>constant::DEFAULT_BLOCK_SIZE</code>)\nConfiguration for fixed LPC encoder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLPC order. (default: <code>QLPC_DEFAULT_ORDER</code>)\nIf set, iteratively optimizes LPC parameters with the …\nMaximum LPC order. (default: <code>constant::fixed::MAX_LPC_ORDER</code>…\nMax value for the parameter of rice coding.\nWhether encoder runs on multi-thread mode. (default: <code>true</code> …\nConfiguration for the algorithm for selecting order.\nConfiguration for partitioned Rice coding.\nConfiguration for quantized LPC encoder.\nPrecision for quantized LPC coefficients. (default: …\nConfiguration for stereo-coding module.\nConfiguration for individual channels.\nIf set to false, constant mode will not be used. (default: …\nIf set, use a direct MSE method for LPC estimation. …\nIf set to false, fixed-LPC mode will not be used. …\nIf set to false, left-side coding will not be used. …\nIf set to false, LPC mode will not be used. (default: <code>true</code>)\nIf set to false, mid-side coding will not be used. …\nIf set to false, right-side coding will not be used. …\nWindow function to be used for LPC estimation.\nThe number of threads used in multithread mode. (default: …\nThe number of partitions used for estimation.\n<code>alpha</code> parameter of Tukey window.\nDefault block size.\nMaximum bits-per-sample supported. (32 in the …\nMaximum length of a block supported (65535 in the …\nMaximum number of channels.\nMinimum bits-per-sample supported. (4 in the …\nMinimum length of a block supported.\nConstants related to build-time information.\nConstants related to fixed-parameter LPC encoding.\nConstants related to par-mode (multithreading.)\nConstants related to quantized linear predictive coding …\nConstants related to partitioned rice coding (PRC).\nBuild profile. “debug” or “release”.\nVersion of <code>flacenc</code> library from Cargo.toml.\nComma-separated strings of features activated.\n<code>rustc</code> version used for building this crate.\nMaximum order of fixed LPC supported.\nThe number of <code>FrameBuf</code>s for each worker thread in par-mode.\nDefault LPC order for QLPC module.\nDefault precision for storing QLPC coefficients.\nDefault alpha parameter for Tukey window.\nMaximum order of LPC supported. (32 in the specification.)\nMax number of bits (precision) for storing QLPC …\nMaximum shift parameter of QLPC defined in the …\nMinimum shift parameter of QLPC.\nThe number of bits used for encoding shift bits of QLPC.\nMaximum number of Rice partitions.\nMaximum order of Rice parameter partitioning.\nMaximum allowed value for the Rice parameters.\nMinimum rice partition size. (1 in the specification)\nEncoder errors due to invalid configuration.\nEnum for possible encoder errors.\nOther IO-related error.\n<code>FrameBuf</code> is not properly prepared.\nThe content of file is not readable.\nThe source file cannot be opened.\nEnum of errors that can be returned while making an output …\nA parameter in a component doesn’t fit in a format.\nError emitted when a parameter is out of the expected …\nI/O error propagated from <code>BitSink</code>.\nEncoder errors due to input sources.\nStruct that wraps errors from <code>Source</code>.\nEnum covering possible error reasons from <code>Source</code>.\nType of file is not supported.\nA wrapper that ensures that the inner <code>T</code> is verified and …\nTrait for verifiable structs.\nError object returned when config integrity verification …\nWraps into <code>Verified</code> without actual verification.\nConstructs <code>SourceError</code> by choosing a reason.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs <code>SourceError</code> from an <code>io::Error</code>.\nConstructs <code>SourceError</code> with unknown (hidden) reason.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWraps into <code>Verified</code> to indicate that the data is already …\nMakes verification error for an invalid variable <code>component</code>.\nGets dot-separated path string for the error location.\nSet path as the source name (informative when <code>Source</code> is …\nVerifies there’s no internal data inconsistency.\nPrepends the name of an enclosing component to the error …\nContext information being updated while reading from <code>Source</code>…\nTraits for buffer-like objects that can be filled by <code>Source</code>…\nReusable buffer for multi-channel framed signals.\nSource with preloaded samples.\nTrait representing seekable variant of <code>Source</code>.\nTrait representing the input source for the encoder.\nReturns sample buffer as a raw slice.\nReturns the number of bits per sample;\nReturns bytes-per-sample configuration of this <code>Context</code>.\nReturns the number of channels.\nReturns the number of channels\nReturns the count of the last frame loaded.\nFills the target variable with the given interleaved …\nFills target with the little-endian bytes that represent …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs <code>MemSource</code> from samples.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the source contains no samples.\nReturns the length in per-channel samples\nReturns length of source if it’s finite and defined.\nReturns MD5 digest of the consumed samples.\nCreates new context.\nReads samples to <code>T: Fill</code>.\nSeeks to the specified offset from the beginning.\nResizes <code>FrameBuf</code>.\nReturns sampling rate in Hz.\nReturns the size in the number of per-channel samples.\nReturns the number of samples loaded.\nConstructs <code>FrameBuf</code> of the specified size.")