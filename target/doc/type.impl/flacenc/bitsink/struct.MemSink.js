(function() {
    var type_impls = Object.fromEntries([["flacenc",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitSink-for-MemSink%3Cu8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#510-610\">Source</a><a href=\"#impl-BitSink-for-MemSink%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"flacenc/bitsink/trait.BitSink.html\" title=\"trait flacenc::bitsink::BitSink\">BitSink</a> for <a class=\"struct\" href=\"flacenc/bitsink/struct.MemSink.html\" title=\"struct flacenc::bitsink::MemSink\">MemSink</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#511\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"flacenc/bitsink/trait.BitSink.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a></h4></section></summary><div class='docblock'>Error type that may happen while writing bits to <code>BitSink</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#514-525\">Source</a><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"flacenc/bitsink/trait.BitSink.html#tymethod.write\" class=\"fn\">write</a>&lt;T: <a class=\"trait\" href=\"flacenc/bitsink/trait.Bits.html\" title=\"trait flacenc::bitsink::Bits\">Bits</a>&gt;(&amp;mut self, val: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, Self::<a class=\"associatedtype\" href=\"flacenc/bitsink/trait.BitSink.html#associatedtype.Error\" title=\"type flacenc::bitsink::BitSink::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes all bits in <code>val: Bits</code>. <a href=\"flacenc/bitsink/trait.BitSink.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.align_to_byte\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#528-532\">Source</a><a href=\"#method.align_to_byte\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"flacenc/bitsink/trait.BitSink.html#tymethod.align_to_byte\" class=\"fn\">align_to_byte</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a>, Self::<a class=\"associatedtype\" href=\"flacenc/bitsink/trait.BitSink.html#associatedtype.Error\" title=\"type flacenc::bitsink::BitSink::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Puts zeros to <code>BitSink</code> until the length aligns to the byte boundaries. <a href=\"flacenc/bitsink/trait.BitSink.html#tymethod.align_to_byte\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_bytes_aligned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#535-540\">Source</a><a href=\"#method.write_bytes_aligned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"flacenc/bitsink/trait.BitSink.html#method.write_bytes_aligned\" class=\"fn\">write_bytes_aligned</a>(&amp;mut self, bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a>, Self::<a class=\"associatedtype\" href=\"flacenc/bitsink/trait.BitSink.html#associatedtype.Error\" title=\"type flacenc::bitsink::BitSink::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes bytes after alignment, and returns padded bits. <a href=\"flacenc/bitsink/trait.BitSink.html#method.write_bytes_aligned\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_msbs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#543-584\">Source</a><a href=\"#method.write_msbs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"flacenc/bitsink/trait.BitSink.html#tymethod.write_msbs\" class=\"fn\">write_msbs</a>&lt;T: <a class=\"trait\" href=\"flacenc/bitsink/trait.Bits.html\" title=\"trait flacenc::bitsink::Bits\">Bits</a>&gt;(&amp;mut self, val: T, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, Self::<a class=\"associatedtype\" href=\"flacenc/bitsink/trait.BitSink.html#associatedtype.Error\" title=\"type flacenc::bitsink::BitSink::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes <code>n</code> MSBs to the sink. <a href=\"flacenc/bitsink/trait.BitSink.html#tymethod.write_msbs\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_lsbs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#587-592\">Source</a><a href=\"#method.write_lsbs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"flacenc/bitsink/trait.BitSink.html#tymethod.write_lsbs\" class=\"fn\">write_lsbs</a>&lt;T: <a class=\"trait\" href=\"flacenc/bitsink/trait.Bits.html\" title=\"trait flacenc::bitsink::Bits\">Bits</a>&gt;(&amp;mut self, val: T, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, Self::<a class=\"associatedtype\" href=\"flacenc/bitsink/trait.BitSink.html#associatedtype.Error\" title=\"type flacenc::bitsink::BitSink::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes <code>n</code> LSBs to the sink. <a href=\"flacenc/bitsink/trait.BitSink.html#tymethod.write_lsbs\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_zeros\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#595-609\">Source</a><a href=\"#method.write_zeros\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"flacenc/bitsink/trait.BitSink.html#method.write_zeros\" class=\"fn\">write_zeros</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, Self::<a class=\"associatedtype\" href=\"flacenc/bitsink/trait.BitSink.html#associatedtype.Error\" title=\"type flacenc::bitsink::BitSink::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes <code>n</code>-bits of zeros. <a href=\"flacenc/bitsink/trait.BitSink.html#method.write_zeros\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_twoc\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#207-215\">Source</a><a href=\"#method.write_twoc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"flacenc/bitsink/trait.BitSink.html#method.write_twoc\" class=\"fn\">write_twoc</a>&lt;T: <a class=\"trait\" href=\"flacenc/bitsink/trait.SignedBits.html\" title=\"trait flacenc::bitsink::SignedBits\">SignedBits</a>&gt;(\n    &amp;mut self,\n    val: T,\n    bits_per_sample: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, Self::<a class=\"associatedtype\" href=\"flacenc/bitsink/trait.BitSink.html#associatedtype.Error\" title=\"type flacenc::bitsink::BitSink::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes <code>val</code> in two’s coplement format. <a href=\"flacenc/bitsink/trait.BitSink.html#method.write_twoc\">Read more</a></div></details></div></details>","BitSink","flacenc::bitsink::ByteSink"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-MemSink%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#274\">Source</a><a href=\"#impl-Clone-for-MemSink%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"flacenc/bitsink/struct.MemSink.html\" title=\"struct flacenc::bitsink::MemSink\">MemSink</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#274\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"flacenc/bitsink/struct.MemSink.html\" title=\"struct flacenc::bitsink::MemSink\">MemSink</a>&lt;S&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","flacenc::bitsink::ByteSink"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-MemSink%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#274\">Source</a><a href=\"#impl-Debug-for-MemSink%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"flacenc/bitsink/struct.MemSink.html\" title=\"struct flacenc::bitsink::MemSink\">MemSink</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#274\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","flacenc::bitsink::ByteSink"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-MemSink%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#288-292\">Source</a><a href=\"#impl-Default-for-MemSink%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"flacenc/bitsink/trait.Bits.html\" title=\"trait flacenc::bitsink::Bits\">Bits</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"flacenc/bitsink/struct.MemSink.html\" title=\"struct flacenc::bitsink::MemSink\">MemSink</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#289-291\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.85.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","flacenc::bitsink::ByteSink"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MemSink%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#294-508\">Source</a><a href=\"#impl-MemSink%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"flacenc/bitsink/trait.Bits.html\" title=\"trait flacenc::bitsink::Bits\">Bits</a>&gt; <a class=\"struct\" href=\"flacenc/bitsink/struct.MemSink.html\" title=\"struct flacenc::bitsink::MemSink\">MemSink</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#305-310\">Source</a><h4 class=\"code-header\">pub fn <a href=\"flacenc/bitsink/struct.MemSink.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates new <code>MemSink</code> instance with the default capacity.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sink = MemSink::&lt;u8&gt;::new();\n<span class=\"kw\">let </span>empty: [u8; <span class=\"number\">0</span>] = [];\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>empty, sink.as_slice());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#322-327\">Source</a><h4 class=\"code-header\">pub fn <a href=\"flacenc/bitsink/struct.MemSink.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(capacity_in_bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates new <code>MemSink</code> instance with the specified capacity (in bits).</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sink = MemSink::&lt;u8&gt;::with_capacity(<span class=\"number\">128</span>);\nsink.write_lsbs(<span class=\"number\">0x00FFu16</span>, <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(sink.into_inner().capacity() &gt; <span class=\"number\">128 </span>/ <span class=\"number\">8</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#341-344\">Source</a><h4 class=\"code-header\">pub fn <a href=\"flacenc/bitsink/struct.MemSink.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the vector, removing all values.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sink = MemSink::&lt;u8&gt;::new();\nsink.write_lsbs(<span class=\"number\">0xAAAAAAAAu32</span>, <span class=\"number\">14</span>);\n<span class=\"macro\">assert_eq!</span>(sink.to_bitstring(), <span class=\"string\">\"10101010_101010**\"</span>);\nsink.clear();\n<span class=\"macro\">assert_eq!</span>(sink.to_bitstring(), <span class=\"string\">\"\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#357-359\">Source</a><h4 class=\"code-header\">pub fn <a href=\"flacenc/bitsink/struct.MemSink.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of bits stored in the buffer.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sink = MemSink::&lt;u8&gt;::new();\nsink.write(<span class=\"number\">0u64</span>);\nsink.write_msbs(<span class=\"number\">0u8</span>, <span class=\"number\">6</span>);\n<span class=\"macro\">assert_eq!</span>(sink.len(), <span class=\"number\">70</span>)</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#372-374\">Source</a><h4 class=\"code-header\">pub fn <a href=\"flacenc/bitsink/struct.MemSink.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the buffer is empty.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sink = MemSink::&lt;u8&gt;::new();\n<span class=\"macro\">assert!</span>(sink.is_empty());\nsink.write_msbs(<span class=\"number\">0u8</span>, <span class=\"number\">6</span>);\n<span class=\"macro\">assert!</span>(!sink.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#391-394\">Source</a><h4 class=\"code-header\">pub fn <a href=\"flacenc/bitsink/struct.MemSink.html#tymethod.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional_in_bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reseerves capacity for at least <code>additional_in_bits</code> more bits.</p>\n<p>This function reserves the ’Vec’s capacity so that the allocated size is\nsufficient for storing <code>self.len() + additional_in_bits</code> bits.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sink = MemSink::&lt;u8&gt;::with_capacity(<span class=\"number\">1</span>);\nsink.write_bytes_aligned(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">0u8</span>; <span class=\"number\">128</span>]);\n<span class=\"macro\">assert_eq!</span>(sink.len(), <span class=\"number\">1024</span>);\nsink.reserve(<span class=\"number\">2048</span>);\n<span class=\"macro\">assert!</span>(sink.into_inner().capacity() &gt; (<span class=\"number\">1024 </span>+ <span class=\"number\">2048</span>) / <span class=\"number\">8</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_bitstring\" class=\"method\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#422-441\">Source</a><h4 class=\"code-header\">pub fn <a href=\"flacenc/bitsink/struct.MemSink.html#tymethod.to_bitstring\" class=\"fn\">to_bitstring</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Returns bits in a string.</p>\n<p>This function formats an internal buffer state to a human-readable\nstring. Each byte is shown in eight characters joined by <code>'_'</code>, and the\nlast bits of the last byte that are not yet filled are shown as <code>'*'</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sink = MemSink::&lt;u8&gt;::new();\nsink.write_msbs(<span class=\"number\">0x3456u16</span>, <span class=\"number\">13</span>);\n<span class=\"macro\">assert_eq!</span>(sink.to_bitstring(), <span class=\"string\">\"00110100_01010***\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#455-457\">Source</a><h4 class=\"code-header\">pub fn <a href=\"flacenc/bitsink/struct.MemSink.html#tymethod.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;S&gt;</h4></section></summary><div class=\"docblock\"><p>Consumes <code>ByteSink</code> and returns the internal buffer.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sink = MemSink::&lt;u8&gt;::new();\nsink.write_bytes_aligned(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xABu8</span>; <span class=\"number\">4</span>]);\n<span class=\"kw\">let </span>v: Vec&lt;u8&gt; = sink.into_inner();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xAB</span>; <span class=\"number\">4</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#470-472\">Source</a><h4 class=\"code-header\">pub fn <a href=\"flacenc/bitsink/struct.MemSink.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.slice.html\">[S]</a></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the internal bytes.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sink = MemSink::&lt;u8&gt;::new();\nsink.write_msbs(<span class=\"number\">0x3456u16</span>, <span class=\"number\">13</span>);\n<span class=\"macro\">assert_eq!</span>(sink.as_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0x34</span>, <span class=\"number\">0x50</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_byte_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/flacenc/bitsink.rs.html#494-507\">Source</a><h4 class=\"code-header\">pub fn <a href=\"flacenc/bitsink/struct.MemSink.html#tymethod.write_to_byte_slice\" class=\"fn\">write_to_byte_slice</a>(&amp;self, dest: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class=\"docblock\"><p>Writes the contents to a mutable byte slice.</p>\n<p>For <code>MemSink&lt;u8&gt;</code>, this function basically makes a copy of the inner\nstorage.  For other instances, this function reorders and flattens the\nbyte structure of the inner storage and copies bytes to the given\nmutable slice.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sink = MemSink::&lt;u64&gt;::new();\nsink.write_msbs(<span class=\"number\">0xCAFE_FEED_BEEF_FACEu64</span>, <span class=\"number\">47</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes = [<span class=\"number\">0u8</span>; <span class=\"number\">6</span>];\nsink.write_to_byte_slice(<span class=\"kw-2\">&amp;mut </span>bytes);\n\n<span class=\"comment\">// The last bit of the last byte (that is not written) is padded with 0.\n</span><span class=\"macro\">assert_eq!</span>(bytes,\n           [<span class=\"number\">0xCA</span>, <span class=\"number\">0xFE</span>, <span class=\"number\">0xFE</span>, <span class=\"number\">0xED</span>, <span class=\"number\">0xBE</span>, <span class=\"number\">0xEE</span>]);</code></pre></div>\n</div></details></div></details>",0,"flacenc::bitsink::ByteSink"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[27683]}